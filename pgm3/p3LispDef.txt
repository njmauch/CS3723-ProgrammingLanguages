;;; useful functions for LISP natural language parsing program

;;; Set up the parse-obj and word-dict
(setf parse-obj (MAKE-HASH-TABLE))
(setf word-dict (MAKE-HASH-TABLE))
(setf table-ht  (MAKE-HASH-TABLE))


;;; processSentence 
;;;    Parameters:
;;;       sentence - a list of words making a sentence
;;;    Purpose:
;;;       - Sets up necessary information (see below) and invokes the student's checkSentence
;;;         function.  
;;;       - Since the student's checkSentence sets the parts of speech, processSentence prints
;;;         those parts of speech.
;;;       - Returns T if the sentence is a valid sentence.  Otherwise, NIL is returned.
;;;    Notes:
;;;       - Sets the parse-obj hash table to contain the sentence
;;;       - Sets the cursor position to zero.
;;;       - Uses resetPartsOfSpeech to reset the values of each part of speech.
;;;       - Prints the sentence
;;;       - Invokes checkSentence to check for valid syntax and prints
;;;         the result.
;;;       - Prints the value for each part of speech.  If the sentence contained a  
;;;       - Sentences will not contain punctuation since
;;;             -- commas have a meaning in Common LISP associated with backquote
;;;             -- periods are used for dotted pairs
;;;    

(defun processSentence(sentence)
    (PROG (result)
        ;;; Save the sentence in parse-obj.
        (putp 'sentence parse-obj sentence) 
        ;;; Set the cursor position to 0.
        (putp 'cursor parse-obj 0)
 
        ;;; reset the parts of speech to NIL
        (resetPartsOfSpeech parse-obj 'verb 'directObj 'prep 'indirectObj 'subject )
        (resetPartsOfSpeech parse-obj 'SubConjunction 'SubSubject 'SubVerb 'SubDirectObj 'SubIndirectObj 'SubPrep)
        
        (format T "~% ******************************************************************")
        (format T "~%  ~a" sentence)
        (setf result (checkSentence parse-Obj))
        (format T "~%    checkSentence returned ~a" result)
        (format T "~%    subject= ~a" (getp 'subject parse-obj))
        (format T "~%    verb= ~a" (getp 'verb parse-obj))
        (format T "~%    directObj= ~a" (getp 'directObj parse-obj))
        (format T "~%    prep= ~a" (getp 'prep parse-obj))
        (format T "~%    indirectObj= ~a" (getp 'indirectObj parse-obj))
        
        ;;; if we have a subordinate clause, show it
        (cond ((or  (getp 'SubConjunction parse-obj)
                    (getp 'SubSubject parse-obj))
                (format T "~%    SubConjunction= ~a" (getp 'SubConjunction parse-obj))
                (format T "~%    SubSubject= ~a" (getp 'SubSubject parse-obj))
                (format T "~%    SubVerb= ~a" (getp 'SubVerb parse-obj))
                (if (getp 'SubDirectObj parse-obj)
                    (format T "~%    SubDirectObj= ~a" (getp 'SubDirectObj parse-obj))) 
                (cond ((getp 'SubPrep parse-obj)
                          (format T "~%    SubPrep= ~a" (getp 'SubPrep parse-obj))
                          (format T "~%    SubIndirectObj= ~a" (getp 'SubIndirectObj parse-obj))
                          ))
        ))
        (return result) 
    ) )
 
;;; putp 
;;;    Parameters:
;;;       symbol   - symbol to be given the property value
;;;       ht       - hash table to store the symbol and its property value
;;;       value    - the property value
;;;    Purpose:
;;;       stores the property value for the symbol in the specified hash table
;;;    Notes:
;;;       If the symbol isn't an ATOM, putp breaks execution with an ERROR.
;;;    Example Usage:
;;;       (putp 'prep parse preposition)
;;;       (putp word word-dict partOfSpeech)

(defun putp (symbol ht value)
    (if (ATOM symbol)
        (setf (gethash symbol ht) value)
        (ERROR "~s is not a valid symbol for putp" symbol)
    )
)
    
;;; getp 
;;;    Parameters:
;;;       symbol   - symbol about which we want its property value
;;;       ht       - hash table which stores the symbol and its property value
;;;    Purpose:
;;;       Returns the property value for the symbol in the specified hash table
;;;       If not found, it returns NIL.
;;;    Example Usage:
;;;       (getp word word-dict)  would return the partOfSpeech for that word
;;;       (getp 'sentence parse-obj)  would return the original sentence from the parse-obj.
(defun getp (symbol ht)
     (gethash symbol ht) )
     
;;; getCursor 
;;;    Parameters:
;;;       parse - the parse object containing a sentence, cursor position, and
;;;               value for each part of speech
;;;    Purpose:
;;;       returns the current cursor position (relative to zero)
(defun getCursor (parse)
    (getp 'cursor parse) )

;;; setCursor 
;;;    Parameters:
;;;       parse - the parse object containing a sentence, cursor position, and
;;;               value for each part of speech
;;;       cursorPosition - new cursor position
;;;    Purpose:
;;;       Sets the value of the cursor position (relative to zero) in the
;;;       parse object
;;;    Notes:
;;;       If the cursorPosition isn't a numeric, setCursor breaks execution 
;;;       with an ERROR.
(defun setCursor (parse cursorPosition)
    (if (numberp cursorPosition)
        (putp 'cursor parse cursorPosition)
        (ERROR "~s is not a numeric argument for setCursor" cursorPosition)
    )
)

;;; getToken
;;;    Parameters:
;;;       parse - the parse object containing a sentence, cursor position, and
;;;               value for each part of speech
;;;    Purpose:
;;;       returns the next token from the sentence.  If there are no more
;;;       tokens, it returns NIL.
;;;    Notes:
;;;       This modifies the cursor position after getting the current token
;;;       at the old position.
    
(defun getToken (parse)
    (prog (temp)
        (setf temp (nth (getp  'cursor parse) (getp  'sentence parse))) 
        (setCursor parse (1+ (getp 'cursor parse))) 
        ;; (print (list "getToken=" temp))
        (return temp) ) )



 ;;; defaulting doingExtra to NIL
 (setf doingExtra NIL)
 
 
 
