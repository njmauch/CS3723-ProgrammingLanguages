;;  Loading file p2Lisp.txt ...
;; p2Lisp.txt
;; Written by Nathan Mauch
;; Different functions with different uses written in lisp


;; insertNth (L N insValue)
;; inserts insValue at the nth spot in the list
(defun insertNth (L N insValue)
        (cond
                ( (NULL L) NIL)
                ( (< 0 N) (CONS (CAR L) (insertNth (CDR L) (1- N) insValue ) ) )
                ( (CONS insValue L) )
        )
)
INSERTNTH



;; reverseTop (L)
;; reverses a list at the high level entries
(defun reverseTop (L)
        (cond
                ( (NULL L) NIL)
                (T (append (reverseTop (CDR L) ) (list (CAR L) ) ) )
        )
)
REVERSETOP



;; reverseAll (L)
;; reverses at all levels of list passed in
(defun reverseAll (L)
        (if (ATOM L)
        L
        (append (reverseAll (CDR L ) ) (list (reverseAll (CAR L) ) ) )
        )
)
REVERSEALL


;; removeNILTop (L)
;; removes NIL values in list from the top level
(defun removeNILTop (L)
        (cond
                ( (NULL L) NIL)
                ( (not (EQL (CAR L) 'NIL) ) (CONS (CAR L) (removeNILTop (CDR L) ) ) )
                ( (removeNILTop (CDR L) ) )
        )
)
REMOVENILTOP


;; removeNILMost (L)
;; removes NIL from any level
;; If result of removing NIL gives a NIL, it is unnecessary to remove that NIL
(defun removeNILMost (L)
        (cond
                ( (NULL L) NIL)
                ( (ATOM (CAR L) )
                ( COND ( (NULL (CAR L) ) (removeNILMost (CDR L) ) )
                (T (CONS (CAR L) (removeNILMost (CDR L) ) ) ) )
        )
        (T (CONS (removeNILMost(CAR L) ) (removeNILMost(CDR L) ) ) )
        )
)
REMOVENILMOST


;; palindrome (L)
;; passed a list and returns T if list is a palindrome
;; return NIL if not
;; Only needs to be a palindrome at the top level
(defun palindrome (L)
        (setf reverse (reverseTop L) )
        (EQUAL L reverse)
)
PALINDROME


;; evalEach (L)
;; evaluates each item in the list using the built-in EVAL function.
;; its functional value is the value of the last expression evaluated
(defun evalEach (L)
        (cond
                ( (not (NULL (CDR L) ) ) (EVAL (CAR L) ) )
        )
        (cond
                ( (NULL (CDR L) ) (EVAL (CAR L) ) )
                (T (evalEach (CDR L) ) )
        )
)
EVALEACH


;; removeNILAll (L)
;; removes any resulting NIL (except the single outermost)
(defun removeNILAll (L)
        (cond ( (ATOM L) L)
                (T (let ( (CAR (removeNILAll (CAR L) ) )
                (CDR (removeNILAll (CDR L) ) ) )
                (if CAR
                        (CONS CAR CDR)
                        CDR) ) )
        )
)
REMOVENILALL

;;  Loaded file p2Lisp.txt
T
Break 1 [139]> (load "p2LispRun.txt" :echo T :print T)
;;  Loading file p2LispRun.txt ...
;; p2LispRun.txt

(insertNth '(X Y Z) 2 'FUN)
(X Y FUN Z)

(insertNth '(X Y Z) 4 'FUN)
(X Y Z)


(reverseTop '(X Y Z))
(Z Y X)

(reverseTop '(X (Y Z (A)) (W)))
((W) (Y Z (A)) X)


(reverseAll '(X Y Z))
(Z Y X)

(reverseAll '(X (Y Z (A)) (W)))
((W) ((A) Z Y) X)


(removeNILTop '(NIL X NIL NIL Y  NIL Z))
(X Y Z)

(removeNILTop '(X NIL Y NIL Z NIL))
(X Y Z)

(removeNILTop '(NIL (X NIL Y) (NIL NIL)))
((X NIL Y) (NIL NIL))


(removeNILMost '(NIL X NIL NIL Y  NIL Z))
(X Y Z)

(removeNILMost '(X NIL (Y NIL Z) NIL))
(X (Y Z))

(removeNILMost '(NIL (NIL) (X NIL Y) (NIL NIL) Z))
(NIL (X Y) NIL Z)

(removeNILMost '(NIL ( (((((NIL) NIL)))))))
((((((NIL))))))


(palindrome '(R A C E C A R))
T

(palindrome '(W A S I T A C A R O R A C A T I S A W))
T

(palindrome '(N I X O N))
NIL


(evalEach '( (setf A 5) (print 'hello) (print 'there) A))
HELLO
THERE
5

(evalEach '( (setf x 10 ) (setf A '(x y z)) (print A) (setf B (car A)) (set B (+ 5 x)) ))
(X Y Z)
15

(print B)
X
X

(print X)
15
15


;;; Extra Credit
(removeNILAll '(NIL X NIL NIL Y  NIL Z))
(X Y Z)

(removeNILAll '(X NIL (Y NIL Z) NIL))
(X (Y Z))

(removeNILAll '(NIL (NIL) (X NIL Y) (NIL NIL) Z))
((X Y) Z)

(removeNILAll '(NIL ( (((((NIL) NIL)))))))
NIL
;;  Loaded file p2LispRun.txt
T